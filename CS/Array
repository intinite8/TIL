배열(Array)은 동일한 자료형의 데이터를 연속된 메모리 공간에 저장하는 자료 구조입니다. 각 데이터는 배열 내에서 고유한 인덱스를 가지며,
이를 통해 특정 위치의 데이터에 접근할 수 있습니다. 배열은 다음과 같은 특징을 가지고 있습니다

 - 순차적인 접근: 배열은 연속된 메모리 공간에 데이터를 저장하므로, 인덱스를 통해 원하는 위치의 데이터에 직접 접근할 수 있습니다.
    이러한 특성으로 인해 배열은 데이터를 순차적으로 접근하는 작업에 효율적입니다.
 - 고정된 크기: 배열은 생성할 때 크기를 정하고, 이 크기는 변경할 수 없습니다. 따라서 배열은 미리 정의된 크기에 맞게 데이터를 저장하고 관리해야 합니다.
    크기를 초과하여 데이터를 저장하려면 보다 큰 배열을 생성하고 기존 데이터를 복사해야 합니다.
 - 인덱스 기반 접근: 배열은 각 요소에 고유한 인덱스를 부여하므로, 해당 인덱스를 사용하여 데이터에 접근할 수 있습니다.
    인덱스는 0부터 시작하며, 배열의 길이보다 작은 정수 값을 가져야 합니다.

배열은 프로그래밍에서 매우 일반적으로 사용되는 자료 구조입니다. 몇 가지 예시로는 다음과 같습니다:

 - 데이터 저장: 배열은 여러 개의 데이터를 하나의 자료 구조로 저장하는 데 사용됩니다. 예를 들어, 정수 배열, 문자열 배열, 객체 배열 등의 형태로 데이터를 저장할 수 있습니다.
 - 검색과 정렬: 배열은 데이터를 순차적으로 접근하고, 특정 요소를 검색하거나 정렬하는 데 사용됩니다. 이진 검색과 같은 알고리즘은 배열이 정렬되어 있다고 가정하고 작동하며,
    배열의 특정 위치에 접근하여 원하는 값을 찾습니다.
 - 다차원 배열: 배열은 한 개 이상의 인덱스를 사용하여 다차원 형태로 구성할 수 있습니다. 이러한 다차원 배열은 행렬(matrix)과 같은 자료 구조를 표현하는 데 사용됩니다.

객체 배열(Object Array)은 배열의 각 요소가 객체(Object)로 구성된 자료 구조입니다.
각 객체는 클래스 또는 구조체의 인스턴스로써, 서로 다른 속성과 동작을 가질 수 있습니다. 객체 배열은 일련의 객체를 저장하고 관리하는 데 사용됩니다.
객체 배열은 일반적인 배열의 특징을 가지면서, 개별 요소로 객체를 포함하는 특징이 있습니다. 객체 배열은 다음과 같은 특징을 가지고 있습니다:

 - 객체 저장: 객체 배열은 서로 다른 객체를 하나의 배열에 저장할 수 있습니다. 각 요소는 객체의 참조를 가지며, 필요에 따라 객체의 속성과 메서드에 접근할 수 있습니다.
 - 동일한 클래스: 객체 배열의 각 요소는 동일한 클래스의 인스턴스여야 합니다. 배열 내에 다른 타입의 객체를 저장할 수 없습니다.
    이로 인해 배열의 크기는 배열이 생성될 때 결정되며, 런타임에 크기를 변경할 수 없습니다.
 - 인덱스 기반 접근: 객체 배열의 각 요소는 0부터 시작하는 인덱스를 가지며, 해당 인덱스를 사용하여 특정 객체에 접근할 수 있습니다.
    이를 통해 배열 내의 객체를 순차적으로 접근하거나 특정 객체를 검색할 수 있습니다.

객체 배열은 다양한 프로그래밍 시나리오에서 유용하게 사용됩니다. 예를 들어, 학생 객체의 배열을 사용하여 학생 목록을 관리하거나,
제품 객체의 배열을 사용하여 재고를 추적하는 등의 상황에서 객체 배열이 활용될 수 있습니다.
객체 배열은 객체 지향 프로그래밍의 개념과 잘 어울리며, 객체의 속성과 동작을 효율적으로 관리하기 위해 활용됩니다.
배열의 각 요소는 독립적으로 접근 및 조작할 수 있으므로, 객체의 집합을 효율적으로 처리하고 관리하는 데 유용합니다.
