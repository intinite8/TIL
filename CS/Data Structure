자료구조는 데이터를 효율적으로 저장, 조직화, 관리 및 조작하기 위한 방법을 제공하는 방법론입니다.
프로그램이나 알고리즘에서 데이터를 구조화하여 효율적인 연산을 수행하고 메모리를 효율적으로 활용할 수 있도록 도와줍니다.
다양한 자료구조가 있지만, 여기서 몇 가지 대표적인 자료구조를 소개하겠습니다

 - 배열(Array): 동일한 데이터 타입의 요소들이 연속적으로 메모리에 저장되는 선형 자료구조입니다. 각 요소는 인덱스를 통해 접근할 수 있습니다.
 - 연결 리스트(Linked List): 각 노드가 데이터와 다음 노드를 가리키는 포인터로 구성되는 자료구조입니다. 노드들은 메모리 어디에나 위치할 수 있고, 동적으로 크기를 조정할 수 있습니다.
 - 스택(Stack): 후입선출(LIFO, Last-In-First-Out) 원리를 따르는 자료구조입니다. 요소를 삽입(push)하거나 제거(pop)할 때는 항상 최상위(top) 위치에서 수행됩니다.
 - 큐(Queue): 선입선출(FIFO, First-In-First-Out) 원리를 따르는 자료구조입니다. 요소를 삽입(enqueue)하거나 제거(dequeue)할 때는 항상 첫 번째(front) 위치에서 수행됩니다.
 - 트리(Tree): 계층적인 구조를 가지며, 한 개의 루트 노드에서 시작하여 여러 개의 자식 노드로 확장되는 자료구조입니다. 이진 트리(Binary Tree)는 최대 두 개의 자식 노드를 갖는 트리를 말합니다.
 - 그래프(Graph): 노드와 노드를 연결하는 간선으로 이루어진 자료구조입니다. 노드 간의 관계를 표현하고 네트워크, 도로망, 소셜 네트워크 등 다양한 상황을 모델링할 수 있습니다.

자료구조는 데이터를 저장하고 조작하는 방법에 따라 다양한 알고리즘을 구현하고 최적화하는 데 활용됩니다.
프로그램의 성능과 메모리 사용을 개선하며, 효율적인 데이터 처리를 가능하게 합니다. 적절한 자료구조의 선택은 프로그램의 효율성과 유지 보수성에 큰 영향을 미칩니다.
